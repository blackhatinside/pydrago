# generated by datamodel-codegen:
#   filename:  example.json
#   timestamp: 2025-02-27T09:45:49+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Style(BaseModel):
    strokeDasharray: float


class Edge(BaseModel):
    sourceHandle: str
    type: str
    style: Style
    id: str
    source: str
    targetHandle: str
    target: str
    selected: Optional[bool] = None
    data: Optional[Data] = None



class ValidateFields(BaseModel):
    attributeCategory: Optional[float] = None
    attributeCategoryKey: Optional[float] = None
    entity: Optional[float] = None


class Metadata(BaseModel):
    name: Optional[str] = None
    min: Optional[int] = None
    max: Optional[int] = None
    edges: Optional[List[Edge]] = None
    nodes: Optional[List[Node3]] = None
    validateWithFields: Optional[ValidateFields] = None
    value: Optional[str] = None
    operator: Optional[str] = None
    validate_: Optional[str] = Field(None, alias='validate')
    dataType: Optional[str] = None
    validateWith: Optional[str] = None
    list: Optional[List] = None
    matchType: Optional[str] = None
    validateFields: Optional[ValidateFields] = None
    id: Optional[str] = None
    relativeDays: Optional[int] = None
    relativeOperation: Optional[str] = None
    entity: Optional[int] = None
    attributeCategory: Optional[float] = None
    attributeCategoryKey: Optional[float] = None
    blocks: Optional[List[Block]] = None


class Data(BaseModel):
    type: Optional[str] = None
    metadata: Optional[Metadata] = None
    is_not: Optional[bool] = None
    position: Optional[Dict[str, Any]] = None
    positionAbsolute: Optional[Dict[str, Any]] = None
    data: Optional[Data] = None
    operator: Optional[str] = None


class Position(BaseModel):
    y: Optional[float] = None
    x: Optional[float] = None


class Block(BaseModel):
    id: str
    sourcePosition: Optional[str] = None
    data: Data
    isNew: Optional[bool] = None
    parent: Optional[None] = None
    response: Optional[str] = None


class Graph(BaseModel):
    edges: List[Edge]
    nodes: List[Node3]
    id: str


class RuleChain(BaseModel):
    debugMode: bool
    root: bool
    id: str
    tenantId: str
    additionalInfo: AdditionalInfo
    name: str


class Node3(BaseModel):
    height: float
    type: str
    id: str
    sourcePosition: Optional[str] = None
    width: float
    data: Data
    position: Position
    positionAbsolute: Position
    targetPosition: Optional[str] = None
    connectable: Optional[bool] = None
    selected: Optional[bool] = None
    dragging: Optional[bool] = None
    sss: Optional[Dict[str, Any]] = None
    draggable: Optional[bool] = None
    metadata: Optional[Metadata] = None


class Edge3(BaseModel):
    SourceNode: str
    TargetNode: str
    Operator: str


class Configuration(BaseModel):
    validateWithFields: ValidateFields
    blocks: Optional[List[Block]] = None
    is_not: Optional[bool] = None
    validateFields: ValidateFields
    NodeIdList: Optional[List[str]] = None
    name: Optional[str] = None
    operator: Optional[str] = None
    validate_: Optional[str] = Field(None, alias='validate')
    dataType: Optional[str] = None
    validateWith: Optional[str] = None
    edges: Optional[List[Edge3]] = None
    nodes: Optional[List[Node3]] = None
    value: Optional[str] = None
    id: Optional[str] = None
    attributeCategory: Optional[float] = None
    attributeCategoryKey: Optional[float] = None
    relativeOperation: Optional[str] = None


class AdditionalInfo(BaseModel):
    description: str
    layoutY: Optional[float] = None
    layoutX: Optional[float] = None


class ConfigNode(BaseModel):
    type: str
    debugMode: bool
    configuration: Configuration
    id: str
    additionalInfo: AdditionalInfo
    name: str


class Connection(BaseModel):
    type: str
    fromId: str
    toId: str


class InitialMetadata(BaseModel):
    nodes: List[ConfigNode]
    connections: List[Connection]
    firstNodeIndex: float


class InternalConfigItem(BaseModel):
    ruleChain: RuleChain
    metadata: InitialMetadata


class Model(BaseModel):
    id: str
    tenant_id: str
    question_id: int
    template_id: int
    config: List[Graph]
    internal_config: List[InternalConfigItem]
    draft_config: List[Graph]
    created_at: str
    updated_at: str
    published_at: str

print(Model.parse_file('example.json'))